from collections import Counter

data = '''[:HELIXFOSSIL,2, 5,3, 4,4,[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]],
[:HELIXFOSSIL,2, 9,3, 4,4,[1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1]],
[:HELIXFOSSIL,1, 13,3, 4,4,[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]],
[:HELIXFOSSIL,1, 17,3, 4,4,[1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1]],
[:ROOTFOSSIL,1, 0,7, 5,5,[1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0]],
[:ROOTFOSSIL,1, 5,7, 5,5,[0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0]],
[:ROOTFOSSIL,1, 10,7, 5,5,[0,1,1,0,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1]],
[:ROOTFOSSIL,1, 15,7, 5,5,[0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0]],
[:CLAWFOSSIL,1, 0,12, 4,5,[0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0]],
[:CLAWFOSSIL,1, 4,12, 5,4,[1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1]],
[:CLAWFOSSIL,1, 9,12, 4,5,[0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0]],
[:CLAWFOSSIL,1, 13,12, 5,4,[1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1]],
[:DOMEFOSSIL,4, 0,3, 5,4,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0]],
[:SKULLFOSSIL,4, 20,7, 4,4,[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0]],
[:ARMORFOSSIL,4, 24,7, 5,4,[0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0]],
[:SUNSTONE,6, 21,17, 3,3,[0,1,0,1,1,1,1,1,1]],
[:SHINYSTONE,6, 26,29, 3,3,[0,1,1,1,1,1,1,1,0]],
[:DAWNSTONE,6, 26,32, 3,3,[1,1,1,1,1,1,1,1,1]],
[:ICESTONE,3, 10,24, 4,2,[1,1,1,0,0,1,1,1]],
[:ICESTONE,3, 24,26, 2,4,[0,1,1,1,1,1,1,0]],
[:DUSKSTONE,6, 14,23, 3,3,[1,1,1,1,1,1,1,1,0]],
[:THUNDERSTONE,6, 26,11, 3,3,[0,1,1,1,1,1,1,1,0]],
[:FIRESTONE,6, 20,11, 3,3,[1,1,1,1,1,1,1,1,1]],
[:WATERSTONE,6, 23,11, 3,3,[1,1,1,1,1,1,1,1,0]],
[:LEAFSTONE,3, 18,14, 3,4,[0,1,0,1,1,1,1,1,1,0,1,0]],
[:LEAFSTONE,3, 21,14, 4,3,[0,1,1,0,1,1,1,1,0,1,1,0]],
[:MOONSTONE,3, 25,14, 4,2,[0,1,1,1,1,1,1,0]],
[:MOONSTONE,3, 27,16, 2,4,[1,0,1,1,1,1,0,1]],
[:OVALSTONE,10, 24,17, 3,3,[1,1,1,1,1,1,1,1,1]],
[:EVERSTONE,10, 21,20, 4,2,[1,1,1,1,1,1,1,1]],
[:STARPIECE,15, 0,17, 3,3,[0,1,0,1,1,1,0,1,0]],
[:RAREBONE,5, 3,17, 6,3,[1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1]],
[:RAREBONE,5, 3,20, 3,6,[1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1]],
[:REVIVE,15, 0,20, 3,3,[0,1,0,1,1,1,0,1,0]],
[:MAXREVIVE,5, 0,23, 3,3,[1,1,1,1,1,1,1,1,1]],
[:LIGHTCLAY,10, 6,20, 4,4,[1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1]],
[:HARDSTONE,10, 6,24, 2,2,[1,1,1,1]],
[:HEARTSCALE,85, 8,24, 2,2,[1,0,1,1]],
[:IRONBALL,10, 9,17, 3,3,[1,1,1,1,1,1,1,1,1]],
[:ODDKEYSTONE,5, 10,20, 4,4,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
[:HEATROCK,10, 12,17, 4,3,[1,0,1,0,1,1,1,1,1,1,1,1]],
[:DAMPROCK,10, 14,20, 3,3,[1,1,1,1,1,1,1,0,1]],
[:SMOOTHROCK,10, 17,18, 4,4,[0,0,1,0,1,1,1,0,0,1,1,1,0,1,0,0]],
[:ICYROCK,10, 17,22, 4,4,[0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1]],
[:AMPLIFIELDROCK,10, 25,0, 4,3,[1,1,0,1,1,1,1,1,1,1,1,1]],
[:REDSHARD,40, 21,22, 3,3,[1,1,1,1,1,0,1,1,1]],
[:GREENSHARD,40, 25,20, 4,3,[1,1,1,1,1,1,1,1,1,1,0,1]],
[:YELLOWSHARD,40, 25,23, 4,3,[1,0,1,0,1,1,1,0,1,1,1,1]],
[:BLUESHARD,40, 26,26, 3,3,[1,1,1,1,1,1,1,1,0]],
[:INSECTPLATE,2, 0,26, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:DREADPLATE,2, 4,26, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:DRACOPLATE,2, 8,26, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:ZAPPLATE,2, 12,26, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:FISTPLATE,2, 16,26, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:FLAMEPLATE,2, 20,26, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:MEADOWPLATE,2, 0,29, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:EARTHPLATE,2, 4,29, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:ICICLEPLATE,2, 8,29, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:TOXICPLATE,2, 12,29, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:MINDPLATE,2, 16,29, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:STONEPLATE,2, 20,29, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:SKYPLATE,2, 0,32, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:SPOOKYPLATE,2, 4,32, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:IRONPLATE,2, 8,32, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:SPLASHPLATE,2, 12,32, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]],
[:PIXIEPLATE,2, 16,32, 4,3,[1,1,1,1,1,1,1,1,1,1,1,1]]'''

def generate_counter(data: str):
    c = Counter()
    for line in data.splitlines():
        name, amt = line.split(',')[:2]
        name = name[2:]
        name = "*" + lookup(name) + "*"
        c[name] += int(amt)
    return c

def generate_prob_dict(counter):
    d = {}
    total = sum(counter.values())
    for item in counter:
        d[item] = "{:.2f}".format((counter[item] / total * 100)) + "%"
    return d

def generate_markup_table(dict):
    l1 = l2 = 0
    for key, value in dict.items():
        l1, l2 = max(l1, len(key)), max(l2, len(value))
    lines = [f"|{'Item'.ljust(l1)}|{'Prob.'.ljust(l2)}|",
    f"|{'-' * l1}|{'-' * l2}|"]
    for key, value in dict.items():
        lines.append(f"|{key.ljust(l1)}|{value.ljust(l2)}|")
    return '\n'.join(lines)

def create_item_lookup():
    with open(rf"utils\reborn_pbs\items.txt") as f:
        data = f.read()
    d = {}
    for line in data.splitlines()[1:]:
        parts = line.split(',')
        d[parts[1]] = parts[2]
    return d

def lookup(item):
    l = create_item_lookup()
    return l[item]

print (generate_markup_table(generate_prob_dict(generate_counter(data))))